http://stackoverflow.com/questions/1650963/ustl-or-stlport-for-android

Ports of STL are officially available in the Android NDK from version r5 on. It can be used either as a static or shared library. The following implementations are available prebuilt with the NDK :

    STLport, based on v5.2.0 :
        static stlport_static : use if you have only one dynamic library in your project.
        dynamic stlport_shared : to use if you have more than one dynamic library in your project.
    GNU libstdc++ system (static library)

The recommended, easy way to use it at build time is by defining APP_STL in the Application.mk, like this :

APP_STL := stlport_static

And if you want to rebuild it (this is not necessary), define STLPORT_FORCE_REBUILD in your Application.mk :

STLPORT_FORCE_REBUILD := true

The unit test framework for STLport is also available.

Current limitations for STLport :

    C++ Exceptions not supported
    RTTI not supported
    "Probable bugs" in support for wchar_t and locales

Various Links :

Documentation is available in the NDK packages at the following locations (there may be more) :

    docsCPLUSPLUS-SUPPORT.html
    sources/cxx-stl/stlport
    sources/cxx-stl/gnu-libstdc++

Download NDK + docs here ; file bugs here

Below is an excerpt from docs/CPLUSPLUS-SUPPORT.html (from NDK docs, r5)
III. Selecting the C++ Standard Library Implementation:

By default, the headers and libraries for the minimal C++ runtime system library (/system/lib/libstdc++.so) are used when building C++ sources.

You can however select a different implementation by setting the variable APP_STL to something else in your Application.mk, for example:

APP_STL := stlport_static

To select the static STLport implementation provided with this NDK. Value APP_STL values are the following:

system -> Use the default minimal C++ runtime library. stlport_static -> Use STLport built as a static library. stlport_shared -> Use STLport built as a shared library.

WARNING: IMPORTANT CAVEAT

 AT THE MOMENT, OUR STLPORT IMPLEMENTATION DOES NOT SUPPORT EXCEPTIONS
 AND RTTI. PLEASE BE SURE TO NOT USE -fexceptions OR -frtti IN ALL
 MODULES THAT USE IT.

WARNING: END OF IMPORTANT CAVEAT

"stlport_shared" is preferred if you have several shared libraries in your project that use the C++ STL, because it avoids duplication of functions and more importantly of global variables (e.g. std::cout) in each one of them, which can have surprising results.

On the other hand, you will have to load it explicitely when starting your application, as in the following example:

 static {
     System.loadLibrary("stlport_shared");
     System.loadLibrary("foo");
     System.loadLibrary("bar");
 }

Where both "libfoo.so" and "libbar.so" depend on "libstlport_shared.so".

Note that the shared library's name if "libstlport_shared.so" to avoid naming conflicts with certain Android system images which include a system-level libstlport.so (which happens to not be ABI-stable and cannot be used from NDK-generated machine code).

"stlport_static" is preferred if you have only one shared library in your project: only the STL functions and variables you actually need will be linked to your machine code, reducing its code size, and you won't need to load the dynamic stlport_shared at startup.
IV. STLport-specific issues:

This NDK provides prebuilt static and shared libraries for STLport, but you can force it to be rebuilt from sources by defining the following in your environment or your Application.mk before building:

STLPORT_FORCE_REBUILD := true

STLport is licensed under a BSD-style open-source license. See sources/cxx-stl/stlport/README for more details about the library.
V. Future Plans:

    Make STLport compatible with C++ exceptions and RTTI
    Full GNU libstdc++ support
    uSTL support?


