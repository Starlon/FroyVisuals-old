
import subprocess
import os
import glob
import sys

def recursiveDirs(root) :
	return filter( (lambda a : a.rfind( "CVS")==-1 ),  [ a[0] for a in os.walk(root)]  )

def unique(list) :
	return dict.fromkeys(list).keys()

def scanFiles(dir, accept=["*.cpp"], reject=[]) :
	sources = []
	paths = recursiveDirs(dir)
	for path in paths :
		for pattern in accept :
			sources+=glob.glob(path+"/"+pattern)
	for pattern in reject :
		sources = filter( (lambda a : a.rfind(pattern)==-1 ),  sources )
	return unique(sources)

def subdirsContaining(root, patterns):
	dirs = unique(map(os.path.dirname, scanFiles(root, patterns)))
	dirs.sort()
	return dirs


env = Environment(tools=['default'], CCFLAGS = Split("-g -O0 -Wall -std=c++0x -Ijsoncpp/include/ -I../../include")) 

libs = env.ParseFlags(["jsoncpp/libs/linux-gcc-4.6.1/libjson_linux-gcc-4.6.1_libmt.a",'-lboost_regex'])
env.MergeFlags(libs)

libs_env = env.Clone()

files = Split("""
LCDControl.cpp 
LCDCore.cpp
GenericSerial.cpp 
BufferedReader.cpp 
Evaluator.cpp
LCDText.cpp
LCDGraphic.cpp
debug.cpp
qprintf.cpp
SpecialChar.cpp
Property.cpp
CFG.cpp
RGBA.cpp
Widget.cpp
WidgetText.cpp
WidgetIcon.cpp
WidgetBar.cpp
WidgetHistogram.cpp
WidgetBignums.cpp
WidgetKey.cpp
WidgetTimer.cpp
WidgetScript.cpp
Hash.cpp
Font_8x16.cpp
Font_6x8.cpp
Font_6x8_bold.cpp
PluginLCD.cpp
""")

LCDControl = env.SharedLibrary(files)


libPluginUptime = libs_env.SharedLibrary(['PluginUptime.cpp', 'Evaluator.cpp', 'debug.cpp'])
libPluginCpuinfo = libs_env.SharedLibrary(['PluginCpuinfo.cpp', 'Evaluator.cpp', 
    'Hash.cpp', 'debug.cpp'])
libPluginNetDev = libs_env.SharedLibrary(['PluginNetDev.cpp', 'Evaluator.cpp', 
    'Hash.cpp', 'qprintf.cpp', 'debug.cpp'])
libPluginMeminfo = libs_env.SharedLibrary(['PluginMeminfo.cpp', 
    'Evaluator.cpp', 'Hash.cpp', 'debug.cpp'])
libPluginUname = libs_env.SharedLibrary(['PluginUname.cpp', 'Evaluator.cpp', 'debug.cpp'])
libPluginProcStat = libs_env.SharedLibrary(['PluginProcStat.cpp', 
    'Evaluator.cpp', 'Hash.cpp', 'qprintf.cpp', 'debug.cpp'])
libPluginNetinfo = libs_env.SharedLibrary(['PluginNetinfo.cpp', 
    'Evaluator.cpp', 'qprintf.cpp', 'debug.cpp'])
libPluginStatfs = libs_env.SharedLibrary(['PluginStatfs.cpp', 'Evaluator.cpp', 
    'debug.cpp'])
libPluginFile = libs_env.SharedLibrary(['PluginFile.cpp', 'Evaluator.cpp', 'debug.cpp'])
libPluginDiskstats = libs_env.SharedLibrary(['PluginDiskstats.cpp', 
    'Evaluator.cpp', 'Hash.cpp', 'debug.cpp'])
libPluginFifo = libs_env.SharedLibrary(['PluginFifo.cpp', 'Evaluator.cpp', 
    'CFG.cpp', 'debug.cpp'])
libPluginLoadavg = libs_env.SharedLibrary(['PluginLoadavg.cpp', 
    'Evaluator.cpp', 'debug.cpp'])
libPluginNetStat = libs_env.SharedLibrary(['PluginNetStat.cpp', 
    'Evaluator.cpp', 'Hash.cpp', 'qprintf.cpp', 'debug.cpp'])
libPluginTime = libs_env.SharedLibrary(['PluginTime.cpp', 'Evaluator.cpp', 'debug.cpp'])
libPluginExec = libs_env.SharedLibrary(['PluginExec.cpp', 'qprintf.cpp', 
    'Hash.cpp', 'debug.cpp'])

libs_env.Install("plugins", [libPluginUptime, libPluginCpuinfo, libPluginNetDev,
    libPluginMeminfo, libPluginUname, libPluginProcStat, libPluginNetinfo,
    libPluginStatfs, libPluginFile, libPluginDiskstats, libPluginFifo,
    libPluginLoadavg, libPluginNetStat, libPluginTime, libPluginExec])
