/** \mainpage Lua_icxx docs

Lua-icxx (pronounced "*lua'ix*") is a small C++ library that simplifies *embedding* a Lua 
interpreter in a C++ application. Embedding the Lua interpreter in a C++ application allows it to 
evaluate Lua expressions, put data in the interpreter's global environment, and run Lua scripts. 
Conversely, the interpreter can be *extended* via dynamically loaded libraries (DLL files on 
Windows, SO files on most popular Nix flavors) that define new functions, classes, and constants 
for scripts to use. 

There are many C++ bindings that provide an OO API to *extend* Lua, but there are few OO 
libraries that do so for *embedding* Lua in C++. For instance you could use SWIG to export some 
classes and functions of a C++ application to Lua, so that Lua scripts run from the application 
could make use of those classes and functions. But making the interpreter run those scripts, or 
run interpreted Lua "chunks", or making it evaluate Lua expressions, requires way too much 
repetetive work for my liking; calling pcall, checking errors via the stack, making sure I don't 
remove too few or too many items from stack, bla bla bla, repeat this in every application... Why? 

Lua-icxx provides an OO API to the Lua interpreter to make it easy to

- load Lua extension libraries (such as 
  generated by SWIG or some other C++ binding library), 
- evaluate Lua expressions and scripts, 
- call Lua functions, access data in tables, etc
- exchange values (numbers, strings) between the interpreter and application
- use user data types (exported to Lua via SWIG or other C++ binding library), 
- create sandboxes for scripts
- and more.

The best thing is, Lua-icxx makes simple things simple, replacing many lines of Lua C API calls
and error checking code with a couple lines of OO code. No need to worry about the Lua stack. Leave 
that up to the Lua extension libraries like SWIG, lua-icxx does the front end part. 

Lua-icxx is being used by a couple commercial projects and the unit testing is fairly extensive.
However, it is still alpha in terms of "completeness": 

- it has only been built on Windows; volunteer needed to do this on Linux!
- the interface is still fairly young, based one set of projects by one person (author); as 
  others use it, shortcomings will be identified

Contributions from others are not only welcome but encouraged. Even feedback about the API 
or documentation is useful.

Most important classes: 

- LuaInterpreter: an instance of a Lua interpreter, with its own space for variables etc
- LuaTempResult: the result of evaluating Lua expressions, getting any data from the interpreter, etc
- LuaObjRef: reference to a Lua "object" (number, string, function, table, etc)
- LuaFuncRef: a reference to a Lua object that is a function
- LuaTableRef: a reference to a Lua object that is a table

Example: 
\code 
LuaInterpreter lua;

// print using Lua's print():
LuaFuncRef luaPrint = lua.eval("print");
luaPrint("Hello World!");                

// create a table, "a", containing an object of class Foo, 
// exported to Lua (via SWIG or other), and a method name
lua.doScript("a={b=getFooExported(), c='bar'}");

// get 3 items from Lua, assumed to have been created already:
LuaTempResult res = lua.eval("a, a.b, a['c']"); 
assert(res.ok());
LuaTableRef a      = res[0]; 
LuaClassObjRef udt = res[1];      // assume a.b is user data type
string method      = res[2];      // assume method name
udt.callMethod(method, 1, 2, 3);  // call a.b:bar(1,2,3)
\endcode

Thanks go to SourceForge.net for hosting this project (http://www.sf.net/projects/lua-icxx). 

Enjoy!

*/

/**
\page install Installation 

Requirements: any Lua 5.1

If building from source: 
- do an SVN checkout as explained on the <a href="http://sourceforge.net/scm/?type=svn&group_id=168188">SVN page for lua-icxx</a>
- to build for MS Windows, using Visual Studio: 
  -# open the Visual Studio solution file in vs-2005-sln, 
     select Release build
  -# adjust the include and libs paths if necessary
  -# build; this puts the headers in "dist/include" folder and binaries 
     in the "dist/lib"

If installing from binary distribution: 
- download distribution from http://sourceforge.net/projects/lua-icxx/files/
- extract to temp folder

To install for use in your applications: 
-#  install header files: 
    - copy the contents of the "include" folder 
        from the zip file (or dist folder, after building, if using the source 
        distribution) to a folder of your choice. A good place is in the 
        include folder of the Lua distribution you want to use, since this 
        will be on your INCLUDES path already for using Lua header files 
        (which are included by lua_icxx). 
    - This would result in a Lua 5.1 
        include folder that contains a folder "lua_icxx" that contains the 
        Lua_icxx headers, and your #include statements will be of the form
        #include "lua_icxx\Lua....h".
-#  install binary: 
    - copy the lua_icxx.* from the zip file's lib folder (or dist/lib folder, 
        after building, if using the source distribution) to a folder of your 
        choice. A good place is in the folder that contains the Lua binaries, 
        since this will already be on your LIBRARIES path for linking to the 
        Lua libraries. 
        
Example installation on Windows (using LuaForWindows):
\code 
C:\Program Files
  \- Lua
       \- 5.1
           |- include
           |   |- lua.h
           |   |- lauxlib.h
           |   |- ...
           |   |- lua_icxx
           |        |- LuaInterpreter.h
           |        \- ...
           \- lib
               |- lua_icxx.lib
               |- lua_icxx.dll
               |- lua5.1.dll
               \- ...
\endcode 

\section usage Usage

- your source file:
    \code
    #include "lua_icxx\LuaInterpreter.h"
    void main() {
        ...
        LuaInterpreter lua;
        ...
    }
    \endcode
- Visual Studio settings: 
    - for compiling: 
        \code
        AdditionalIncludeDirectories="$(LUA_INCLUDE)"
        \endcode
    - linking:
        \code
        AdditionalDependencies="lua51.lib;lua_icxx.lib"
        AdditionalLibraryDirectories="$(LUA_BINARIES)"
        \endcode
*/

/** \page sandboxing Lua Sandboxes

The function environment is useful to create a "sandbox" for 
the function body, ie to control which parts of Lua 
the function code has access to -- critical for preventing
bad script behavior. The table given as sandbox provides
the global environment of the function. Hence if the table
contains only one field, "print", the associated value of 
which is a reference to Lua's print function, then the 
function code will only be able to call print and nothing 
else. Note that due to Lua's mechanism of "tables as classes", 
ie tables can "derive" from another table, functions can 
have sandboxes that consist of a shared part and a part
specific to only the function. 

*/